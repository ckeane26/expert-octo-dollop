/*
@title: Tic Tac Toe
@author: taco
@tags: [tacostictactoe.js]
@addedOn: 2024-7-3
*/

let player = "X"; // the current player
// need to add player y so 2 player
let gameOver = false; // game over flag

// bitmaps
const x = "x";
const o = "o";
const e = "e";
const a = "a"; // y axis
const b = "b"; // x axis
setLegend(
  [x, bitmap`
................
................
................
....00....00....
.....00..00.....
......0000......
.......00.......
.......00.......
......0000......
.....00..00.....
....00....00....
................
................
................
................
................`],
  [o, bitmap`
................
................
................
......0000......
....00....00....
...00......00...
...00......00...
...00......00...
...00......00...
....00....00....
......0000......
................
................
................
................
................`],
  [e, bitmap`
................
................
................
................
.....0000.......
....0....0......
.........0......
.........0......
........0.......
.......0........
......0.........
................
................
......0.........
................
................`],
  [a, bitmap`
................
................
................
................
................
................
......6.........
.....6666666....
....66666666....
.....6666666....
......6.........
................
................
................
................
................`],
  [b, bitmap`
................
................
................
................
.......666......
.......666......
.......666......
.......666......
......66666.....
.......666......
........6.......
................
................
................
................
................`]
);

// the map
const board = map`
.b...
.eeea
.eee.
.eee.
.....`;
setMap(board);

// check and display the intersection coordinates
function checkIntersection() {
  const aSprite = getFirst(a);
  const bSprite = getFirst(b);

  const xCoord = bSprite.x;
  const yCoord = aSprite.y;

  clearText();
  addText(`X: ${xCoord}, Y: ${yCoord}`, { x: 1, y: 5, color: color`3` });
}

// move "a" arrow up and down with 'w' and 's'
onInput("w", () => {
  const aSprite = getFirst(a);
  if (aSprite.y > 1) { // prevent y=0
    aSprite.y -= 1;
  }
  checkIntersection();
});

onInput("s", () => {
  const aSprite = getFirst(a);
  if (aSprite.y < 3) {
    aSprite.y += 1;
  }
  checkIntersection();
});

// move "b" arrow left and right with 'a' and 'd'
onInput("a", () => {
  const bSprite = getFirst(b);
  if (bSprite.x > 1) { // prevent x=0
    bSprite.x -= 1;
  }
  checkIntersection();
});

onInput("d", () => {
  const bSprite = getFirst(b);
  if (bSprite.x < 3) {
    bSprite.x += 1;
  }
  checkIntersection();
});


checkIntersection();

//need to put in on input "I" place an x or o

// check for a win condition
function checkWin(board, symbol) {
  // rows
  for (let y = 0; y < board.length; y++) {
    if (board[y].every(cell => cell === symbol)) {
      return true;
    }
  }

  // coloums
  for (let x = 0; x < board[0].length; x++) {
    if (board.every(row => row[x] === symbol)) {
      return true;
    }
  }

  //diagonals
  if (board[0][0] === symbol && board[1][1] === symbol && board[2][2] === symbol) {
    return true;
  }
  if (board[0][2] === symbol && board[1][1] === symbol && board[2][0] === symbol) {
    return true;
  }

  return false;
}

// check for tie
function checkTie(board) {
  for (let y = 0; y < board.length; y++) {
    for (let x = 0; x < board[y].length; x++) {
      if (board[y][x] === e) {
        return false;
      }
    }
  }
  return true;
}
